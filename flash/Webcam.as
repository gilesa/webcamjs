var $ = require('jquery'),	Class = require( 'js-oop' ),	BaseContent = require( 'libjs' ).BaseContent,	globals = require( 'libjs' ).globals,	webcam = require( '../fallback/webcam' ),	Element = require('libjs').Element,	dataCapture = require( '../capture/dataCapture'),	router = require( '../router/' ),	TimerWidget = require('../ui/capture/WebcamTimer'),	TweenLite = require('tweenlite'),	raf = requestAnimationFrame,	caf = cancelAnimationFrame,	analyzeImage = require('../capture/analyzeImage');var DO_DEBUG = true;module.exports = new Class( {	Extends: BaseContent,	init: function( initData, onComplete ) {		this.isIn = false;		this.onAnalyze = this.onAnalyze.bind( this );		this.whiteFlash = new Element( 'div' );		this.whiteFlash.css( {			zIndex: 20,			position: 'absolute',			left: 0,			top: 0,			background: '#FFF',			visibility: 'hidden'		});		// Timer widget		this.timerWidget = new TimerWidget( this.container );		this.timerWidget.render();		this.timerWidget.init();		this.timerWidget.onZero.add( this.onCountdownZero.bind(this) );		this.container.append( this.whiteFlash );		if( DO_DEBUG ) {			this.dCanvas = document.createElement( 'canvas' );			with( this.dCanvas.style ) {				position = 'absolute';				left = 0 + 'px';				top = 0 + 'px';			}		} else {			this.dCanvas = null;		}		this.webCamInited = false;		var webCamInitData = {			onInit: function( canvas, video ) {				if( DO_DEBUG ) {					this.dCanvas.width = canvas.width;					this.dCanvas.height = canvas.height;				}				this.canvas = canvas;				this.webCamInited = true;				this.resize( this.width, this.height );				webcam.startCapture();			}.bind( this ),			onUpdate: this.onCapture.bind( this )		};		if( !webcam.initialized ) {			this.video = $( '<div name="video" />' ).appendTo( document.body );			webCamInitData.element = this.video[ 0 ];			webCamInitData.width = 320;			webCamInitData.height = 240;			webCamInitData.force_flash = true;		} else {			this.video = $( webcam.video );		}					// Make sure we got webcam		webcam.init( webCamInitData );		onComplete();	},	startCaptureCountDown: function() {		this.timerWidget.startCountDown()	},	onCountdownZero: function(){				this.doCapture();	},	doFlash: function(onComplete){		TweenLite.to( this.whiteFlash, 0.1, {autoAlpha:1, ease:Linear.easeNone, onComplete:onComplete} );	},	onAnalyze: function() {		if (DO_DEBUG)			document.body.appendChild(this.dCanvas)		analyzeImage(this.canvas, {			outCanvas: DO_DEBUG ? this.dCanvas : null,			duration: 5.0,			interval: 1.0/30		}, function(ev) {			dataCapture.canvas = this.canvas			dataCapture.data = ev			this.startCaptureCountDown();			analyzeImage(this.canvas, {				outCanvas: DO_DEBUG ? this.dCanvas : null,				duration: 2.5,				interval: 1.0/15			}, function(ev2) {				dataCapture.data = ev2			})		}.bind(this))	},	onCapture: function( canvas ) {		//remove the update interval since we're good		webcam.onUpdate = null;		this.onAnalyze();	},	doCapture: function() {		var flashComplete = function(){			router.goto( 'captureEdit', null, false );		}.bind(this);		this.doFlash( flashComplete );	},	resize: function( width, height ) {		this.parent( width, height );		if( DO_DEBUG ) {			this.dCanvas.width = width;			this.dCanvas.height = height;				}				this.whiteFlash.css( {			width: width,			height: height		});		if( this.webCamInited ) {			var scaleX = width / webcam.width,				scaleY = height / webcam.height,				scale = scaleX > scaleY ? scaleX : scaleY,				offX = ( width - webcam.width * scale ) * 0.5,				offY = ( height - webcam.height * scale ) * 0.5,				videoStyle = {					position: 'absolute',					left: 0,					top: 0,					'transform-origin': '0% 0%',					transform: 'translate( ' + offX + 'px, ' + offY + 'px ) scale( ' + scale + ', ' + scale + ' )'				};		} else {			var offX = ( width - webcam.width ) * 0.5,				offY = ( height - webcam.height ) * 0.5,				videoStyle = {					position: 'absolute',					left: Math.round( offX ),					top: Math.round( offY ),				};		}		this.video.css( videoStyle );		if( DO_DEBUG ) {			$( this.dCanvas ).css( videoStyle );		}	},	animateIn: function( delay, onComplete ) {		globals.orangeLogo.moveLeft();		var onAnimatedIn = function() {				this.isIn = true;			this.timerWidget.animateIn();			onComplete();		}.bind( this );		onAnimatedIn();	},	animateOut: function( delay, onComplete ) {		this.isIn = false;		if( DO_DEBUG ) {			$( this.dCanvas ).remove();		}				onComplete();	},	destroy: function() {		webcam.destroy();		this.parent();		caf( this.rafID );	}});