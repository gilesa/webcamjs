package {	/* Webcam.js v1.0 */	/* Webcam library for capturing JPEG/PNG images and sending them to JavaScript */	/* Author: Joseph Huckaby <jhuckaby@effectgames.com> */	/* Based on JPEGCam: http://code.google.com/p/jpegcam/ */	/* Copyright (c) 2012 Joseph Huckaby */	/* Licensed under the MIT License */		import com.adobe.images.JPGEncoder;	import com.adobe.images.PNGEncoder;		import flash.display.BitmapData;	import flash.display.LoaderInfo;	import flash.display.Sprite;	import flash.display.StageAlign;	import flash.display.StageScaleMode;	import flash.events.ActivityEvent;	import flash.events.Event;	import flash.external.ExternalInterface;	import flash.media.Camera;	import flash.media.Video;	import flash.system.Security;	import flash.system.SecurityPanel;	import flash.utils.ByteArray;		import mx.utils.Base64Encoder;	public class Webcam extends Sprite {		private var video:Video;		private var videoDest:Video;		private var video_width:int;		private var video_height:int;		private var dest_width:int;		private var dest_height:int;		private var camera:Camera;		private var bmpdata:BitmapData;		private var jpeg_quality:int;		private var image_format:String;		private var highResImages:Object;				public function Webcam() {			// class constructor			flash.system.Security.allowDomain("*");						this.addEventListener( Event.ADDED_TO_STAGE, function( ev: Event):void {								stage.scaleMode = StageScaleMode.NO_SCALE;				stage.align = StageAlign.TOP_LEFT;								var flashvars:Object = LoaderInfo(stage.loaderInfo).parameters;								video_width = Math.floor( flashvars.width );				video_height = Math.floor( flashvars.height );				dest_width = flashvars.dest_width == undefined ? video_width : Math.floor( flashvars.dest_width );				dest_height = flashvars.dest_height == undefined ? video_height : Math.floor( flashvars.dest_height );				jpeg_quality = flashvars.jpeg_quality == undefined ? 50 : Math.floor( flashvars.jpeg_quality );				image_format = flashvars.image_format;								stage.scaleMode = StageScaleMode.NO_SCALE;				stage.align = StageAlign.TOP_LEFT;				stage.stageWidth = Math.max(video_width, dest_width);				stage.stageHeight = Math.max(video_height, dest_height);								if (flashvars.new_user) {					Security.showSettings( SecurityPanel.PRIVACY );				}								// Hack to auto-select iSight camera on Mac (JPEGCam Issue #5, submitted by manuel.gonzalez.noriega)				// From: http://www.squidder.com/2009/03/09/trick-auto-select-mac-isight-in-flash/				var cameraIdx:int = -1;				for (var idx:uint = 0, len:uint = Camera.names.length; idx < len; idx++) {					if (Camera.names[idx] == "USB Video Class Video") {						cameraIdx = idx;						idx = len;					}				}				if (cameraIdx > -1) camera = Camera.getCamera( String(cameraIdx) );				else camera = Camera.getCamera();														if (camera != null) {										highResImages = {};										camera.addEventListener(ActivityEvent.ACTIVITY, activityHandler);					video = new Video( video_width, video_height );					video.smoothing = true;					video.attachCamera(camera);					addChild(video);										videoDest = new Video( dest_width, dest_height );					videoDest.smoothing = true;					videoDest.attachCamera( camera );										camera.setQuality(0, 100);					camera.setKeyFrameInterval(10);					camera.setMode( video_width, video_height, 30);										bmpdata = new BitmapData( dest_width, dest_height, false, 0x0 );										// only detect motion once, to determine when camera is "live"					camera.setMotionLevel( 1 );										ExternalInterface.addCallback('_snap', snap);					ExternalInterface.addCallback('_configure', configure);					ExternalInterface.addCallback('_saveHighRes', saveHighRes);					ExternalInterface.addCallback('_deleteHighRes', deleteHighRes);					ExternalInterface.addCallback('_getHighRes', getHighRes);														ExternalInterface.call('Webcam.flashNotify', 'flashLoadComplete', true);				}				else {					trace("You need a camera.");					ExternalInterface.call('Webcam.flashNotify', "error", "No camera was detected.");				}								stage.addEventListener( Event.RESIZE, onStageResize );				onStageResize();			});		}				private function onStageResize( ev:Event = null ):void {						video.width = stage.stageWidth;			video.height = stage.stageHeight;		}				public function configure(panel:String = SecurityPanel.CAMERA):void {			// show configure dialog inside flash movie			Security.showSettings(panel);		}				private function activityHandler(event:ActivityEvent):void {			trace("activityHandler: " + event);			ExternalInterface.call('Webcam.flashNotify', 'cameraLive', true);						// now disable motion detection (may help reduce CPU usage)			camera.setMotionLevel( 100 );		}				public function snapHigh():void {								}				public function snap():String {						bmpdata.draw( videoDest );						return this.getB64( bmpdata );		}				private function getB64( bmd:BitmapData ):String {						var bytes:ByteArray;						if (image_format == 'png') {				bytes = PNGEncoder.encode( bmd );			}			else {				var encoder:JPGEncoder;				encoder = new JPGEncoder( jpeg_quality );				bytes = encoder.encode( bmd );			}						trace("raw image length: " + bytes.length);						var be:Base64Encoder = new Base64Encoder();			be.encodeBytes( bytes );						var bstr:String = be.toString();			trace("b64 string length: " + bstr.length);						return bstr;		}				public function saveHighRes( id:String ):void {						if( this.highResImages[ id ] ) {								BitmapData( this.highResImages[ id ] ).dispose();			}						var bmd:BitmapData = new BitmapData(video_width, video_height, false, 0x0);			bmd.draw(video);						this.highResImages[ id ] = bmd;		}				public function deleteHighRes( id:String ):void {						if( this.highResImages[ id ] ) {								BitmapData( this.highResImages[ id ] ).dispose();				this.highResImages[ id ] = undefined;			}		}				public function getHighRes( id:String ):String {						if( this.highResImages[ id ] ) {								return this.getB64( this.highResImages[ id ] );			} else {								return null;			}		}	}}